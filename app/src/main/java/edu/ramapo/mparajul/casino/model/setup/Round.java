//****************************************************
//* Name: Manasbi Parajuli
//* Project: Casino
//* Class: CMPS 366-01
//* Date: 11/20/2018
//****************************************************
package edu.ramapo.mparajul.casino.model.setup;

import java.util.Vector;

import edu.ramapo.mparajul.casino.model.players.Computer;
import edu.ramapo.mparajul.casino.model.players.Human;
import edu.ramapo.mparajul.casino.model.players.Player;

public class Round
{
    private int roundNumber;
    private int numberOfPlayers;
    private int humanIndex;
    private int computerIndex;

    private String lastCapturer;
    private String nextPlayer;
    private boolean isNewGame;

    private Vector<Card> tableCards;
    private Deck deck;

    private Player players[];


    // ****************************************************************
    // Function Name: Round
    // Purpose: serves as a default constructor for Round class
    // Parameters: -> nextPlayer, a string. Holds the name of the next player
    //             -> lastCapturer, a string. Holds the last capturer in the game
    //             -> roundNumber, an integer. Holds the current round value
    // Return value: none
    // Assistance Received: none
    // ****************************************************************
    Round (String nextPlayer, String lastCapturer,  int roundNumber)
    {
        this.nextPlayer = nextPlayer;
        this.lastCapturer = lastCapturer;
        this.roundNumber = roundNumber;
        numberOfPlayers = 2;
        isNewGame = false;

        // Set the index of the players based on who the next player is
        if (this.nextPlayer.equals("Human"))
        {
            humanIndex = 0;
            computerIndex = 1;
        }
        if (this.nextPlayer.equals("Computer"))
        {
            humanIndex = 1;
            computerIndex = 0;
        }

        if (this.lastCapturer.equals("Human"))
        {
            humanIndex = 0;
            computerIndex = 1;
        }
        if (this.lastCapturer.equals("Computer"))
        {
            humanIndex = 1;
            computerIndex = 0;
        }

        players[humanIndex] = new Human("Human");
        players[computerIndex] = new Computer("Computer");
    }

    // ****************************************************************
    // Function Name: createPlayers
    // Purpose: creates a pointer to two players each of human and computer and sets their index
    // Parameters: none
    // Return value: none
    // Assistance Received: none
    // ****************************************************************
    public void createPlayers()
    {
        // Set the index of the players based on who the next player is
        if (nextPlayer.equals("Human"))
        {
            humanIndex = 0;
            computerIndex = 1;
        }
        if (nextPlayer.equals("Computer"))
        {
            humanIndex = 1;
            computerIndex = 0;
        }
        players[humanIndex] = new Human("Human");
        players[computerIndex] = new Computer("Computer");
    }

    // ****************************************************************
    // Function Name: startGame
    // Purpose: loads the deck generated by the program
    // Parameters: none
    // Return value: none
    // Assistance Received: none
    // ****************************************************************
    public void startGame()
    {
        deck.createShuffledDeck();
        isNewGame = true;
    }

    // ****************************************************************
    // Function Name: dealCardsToPlayer
    // Purpose: deals cards to Human, Computer and places next four cards
    //          on the table
    // Parameters: newRound, the boolean that holds the flag as new round
    // Return value: none
    // Assistance Received: none
    // ****************************************************************
    public void dealCardsToPlayers(boolean newRound)
    {
        int totalCardsToDeal = 0;

        if (newRound) { totalCardsToDeal = 12; }
        else { totalCardsToDeal = 8; }

        // get cards based on whether it is a new or ongoing round and deal accordingly
        for (int i = 0; i < totalCardsToDeal; i++)
        {
            Card card = deck.dealCard();

            // Deal first four cards to the human player
            if (i < 4)
            {
                players[humanIndex].addCardsToHand(card);
            }
            // Deal next four cards to the computer
            else if (i < 8)
            {
                players[computerIndex].addCardsToHand(card);
            }
            // Deal cards on the table if it is a new round
            if (newRound)
            {
                if (i >= 8)
                {
                    tableCards.add(card);
                }
            }
        }
    }

    // ****************************************************************
    // Function Name: removeCardFromTable
    // Purpose: remove the group of cards from table
    // Parameters: cardsToRemove, a vector of cards that need to be
    //                   removed from the table
    // Return value: none
    // Assistance Received: none
    // ****************************************************************
    public void removeCardsFromTable(Vector<Card> cardsToRemove)
    {
        for (Card builtCards : cardsToRemove)
        {
            tableCards.remove(builtCards);
        }
    }

    // ****************************************************************
    // Function Name: getRoundNumber
    // Purpose: gets the current round number
    // Parameter: none
    // Return value: the current round, an integer value
    // Assistance Received: none
    // ****************************************************************
    public int getRoundNumber()
    {
        return roundNumber;
    }

    // ****************************************************************
    // Function Name: setRoundNumber
    // Purpose: sets the current round number
    // Parameter: rnd, an integer value. Holds the new round number
    // Return value: none
    // Assistance Received: none
    // ****************************************************************
    public void setRoundNumber(int roundNumber)
    {
        this.roundNumber = roundNumber;
    }

    // ****************************************************************
    // Function Name: getLastCapturer
    // Purpose: gets the last capturer player in the game
    // Parameters: none
    // Return value: identifier of the last capturer player, a string.
    // Assistance Received: none
    // ****************************************************************
    public String getLastCapturer()
    {
        return lastCapturer;
    }

    // ****************************************************************
    // Function Name: setLastCapturer
    // Purpose: sets the last capturer in the game
    // Parameters: capturer, a string. Holds the name of the last capturer in the game
    // Return value: none
    // Assistance Received: none
    // ****************************************************************
    public void setLastCapturer(String lastCapturer)
    {
        this.lastCapturer = lastCapturer;
    }

    // ****************************************************************
    // Function Name: getNextPlayer
    // Purpose: gets the next player in the game
    // Parameters: none
    // Return value: identifier of the next player, a string.
    // Assistance Received: none
    // ****************************************************************
    public String getNextPlayer()
    {
        return nextPlayer;
    }

    // ****************************************************************
    // Function Name: setNextPlayer
    // Purpose: sets the next player in the game
    // Parameters: next, a string. Holds the name of the next player in the game
    // Return value: none
    // Assistance Received: none
    // ****************************************************************
    public void setNextPlayer(String nextPlayer)
    {
        this.nextPlayer = nextPlayer;
    }

    // ****************************************************************
    // Function Name: setDeck
    // Purpose: sets the deck in the game
    // Parameters: tempDeck, a vector of cards. Hold the new deck for the game
    // Return value: none
    // Assistance Received: none
    // ****************************************************************
    public void setDeck(Vector<Card> tempDeck)
    {
        deck.setDeck(tempDeck);
    }

    // ****************************************************************
    // Function Name: getTableCards
    // Purpose: gets the current cards in the table
    // Parameters: none
    // Return value: a vector of table cards.
    // Assistance Received: none
    // ****************************************************************
    public Vector<Card> getTableCards()
    {
        return tableCards;
    }

    // ****************************************************************
    // Function Name: setTableCards
    // Purpose: sets the current cards in the table
    // Parameters: cards, a vector of table cards
    // Return value: none
    // Assistance Received: none
    // ****************************************************************
    public void setTableCards(Vector<Card> tableCards)
    {
        this.tableCards = tableCards;
    }

    // ****************************************************************
    // Function Name: isTableEmpty
    // Purpose: checks if the table is empty or not
    // Parameters: none
    // Return value: returns true or false based on whether the table is empty or not
    // Assistance Received: none
    // ****************************************************************
    public boolean isTableEmpty()
    {
        return tableCards.isEmpty();
    }
}